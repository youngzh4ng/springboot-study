/*
 * This file is generated by jOOQ.
*/
package com.test.springboot.jooq.data.jooq.tables;


import com.test.springboot.jooq.data.jooq.Indexes;
import com.test.springboot.jooq.data.jooq.Keys;
import com.test.springboot.jooq.data.jooq.Public;
import com.test.springboot.jooq.data.jooq.tables.records.TestUserRecord;

import java.math.BigInteger;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestUser extends TableImpl<TestUserRecord> {

    private static final long serialVersionUID = 2014049381;

    /**
     * The reference instance of <code>PUBLIC.TEST_USER</code>
     */
    public static final TestUser TEST_USER = new TestUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestUserRecord> getRecordType() {
        return TestUserRecord.class;
    }

    /**
     * The column <code>PUBLIC.TEST_USER.ID</code>.
     */
    public final TableField<TestUserRecord, BigInteger> ID = createField("ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TEST_USER.USERNAME</code>.
     */
    public final TableField<TestUserRecord, String> USERNAME = createField("USERNAME", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.TEST_USER.AGE</code>.
     */
    public final TableField<TestUserRecord, Short> AGE = createField("AGE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>PUBLIC.TEST_USER.PHONE</code>.
     */
    public final TableField<TestUserRecord, String> PHONE = createField("PHONE", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.TEST_USER.BIRTHDAY</code>.
     */
    public final TableField<TestUserRecord, Date> BIRTHDAY = createField("BIRTHDAY", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.TEST_USER.EMAIL</code>.
     */
    public final TableField<TestUserRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>PUBLIC.TEST_USER</code> table reference
     */
    public TestUser() {
        this(DSL.name("TEST_USER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TEST_USER</code> table reference
     */
    public TestUser(String alias) {
        this(DSL.name(alias), TEST_USER);
    }

    /**
     * Create an aliased <code>PUBLIC.TEST_USER</code> table reference
     */
    public TestUser(Name alias) {
        this(alias, TEST_USER);
    }

    private TestUser(Name alias, Table<TestUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestUser(Name alias, Table<TestUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_61);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestUserRecord> getPrimaryKey() {
        return Keys.TEST_USERS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TestUserRecord>>asList(Keys.TEST_USERS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestUser as(String alias) {
        return new TestUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestUser as(Name alias) {
        return new TestUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestUser rename(String name) {
        return new TestUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestUser rename(Name name) {
        return new TestUser(name, null);
    }
}
