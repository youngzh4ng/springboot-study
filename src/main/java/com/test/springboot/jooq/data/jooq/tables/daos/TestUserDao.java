/*
 * This file is generated by jOOQ.
*/
package com.test.springboot.jooq.data.jooq.tables.daos;


import com.test.springboot.jooq.data.jooq.tables.TestUser;
import com.test.springboot.jooq.data.jooq.tables.records.TestUserRecord;

import java.math.BigInteger;
import java.sql.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestUserDao extends DAOImpl<TestUserRecord, com.test.springboot.jooq.data.jooq.tables.pojos.TestUser, BigInteger> {

    /**
     * Create a new TestUserDao without any configuration
     */
    public TestUserDao() {
        super(TestUser.TEST_USER, com.test.springboot.jooq.data.jooq.tables.pojos.TestUser.class);
    }

    /**
     * Create a new TestUserDao with an attached configuration
     */
    public TestUserDao(Configuration configuration) {
        super(TestUser.TEST_USER, com.test.springboot.jooq.data.jooq.tables.pojos.TestUser.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected BigInteger getId(com.test.springboot.jooq.data.jooq.tables.pojos.TestUser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchById(BigInteger... values) {
        return fetch(TestUser.TEST_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public com.test.springboot.jooq.data.jooq.tables.pojos.TestUser fetchOneById(BigInteger value) {
        return fetchOne(TestUser.TEST_USER.ID, value);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchByUsername(String... values) {
        return fetch(TestUser.TEST_USER.USERNAME, values);
    }

    /**
     * Fetch records that have <code>AGE IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchByAge(Short... values) {
        return fetch(TestUser.TEST_USER.AGE, values);
    }

    /**
     * Fetch records that have <code>PHONE IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchByPhone(String... values) {
        return fetch(TestUser.TEST_USER.PHONE, values);
    }

    /**
     * Fetch records that have <code>BIRTHDAY IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchByBirthday(Date... values) {
        return fetch(TestUser.TEST_USER.BIRTHDAY, values);
    }

    /**
     * Fetch records that have <code>EMAIL IN (values)</code>
     */
    public List<com.test.springboot.jooq.data.jooq.tables.pojos.TestUser> fetchByEmail(String... values) {
        return fetch(TestUser.TEST_USER.EMAIL, values);
    }
}
